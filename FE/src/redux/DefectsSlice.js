// src/redux/DefectsSlice.js
import { createSlice } from '@reduxjs/toolkit'

const initialState = {
  defects: [],
  updated_at: null,
}

const defectsSlice = createSlice({
  name: 'defects',
  initialState,
  reducers: {
    setDefects: (state, action) => {
      state.defects = action.payload.defects
      state.updated_at = action.payload.updated_at // Update updated_at state
    },
    clearDefects: (state) => {
      state.defects = []
      state.updated_at = null // Reset updated_at state
    },
  },
})

// Export the actions generated by createSlice
export const { setDefects, clearDefects } = defectsSlice.actions

// Selector function to filter defects by screen_no
export const selectDefectsByScreenNo = (state, screenNo) => {
  if (!screenNo) {
    return state.defects.defects
  }
  console.log(state.defects)

  const defects = screenNo
    ? state.defects.defects.filter((defect) => defect.screen_no === screenNo)
    : state.defects.defects

  const defectMap = new Map()

  defects.forEach((defect) => {
    if (defectMap.has(defect.id)) {
      const existingDefect = defectMap.get(defect.id)
      existingDefect.count += 1
    } else {
      defectMap.set(defect.id, { ...defect, count: defect.count || 1 })
    }
  })

  return Array.from(defectMap.values())
  // return state.defects.defects.filter((defect) => defect.screen_no === screenNo)
}

// Export the reducer generated by createSlice
export default defectsSlice.reducer
